'''
Nash Equilibria on (Un-)Stable Networks

2020
Anton Badev
anton.badev@gmail.com

PLOTS COUNTERFACTUAL EXPERIMENT PRICE CHANGE (AS A RESULT OF EXCISE TAX)
    -A- Table comparing policy effect under different scenarios
    -B- Plot compare distribution of overall smoking under selected scenarios 
    -C- Tests effect of price changes on the distribution of overall smoking 

Input files:
    ctrfPrice.data (in scratchdir)
    
Output files:
    table_ctrfPrice.tex
    table_ctrfPrice_tests.tex
    fig_ctrfPrice_compareDistSmoking.pdf

Note output in texdir
    ctrfPrice.data generated by ctrfPrice.py
'''


import numpy as np
import pandas as pd
import scipy.io as sio
import pickle
from sklearn.neighbors import KernelDensity
from scipy import stats
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

from libsetups import setupdirs



def main():

    [systime0,pyfilename,pyfiledir,homedir,currentdir,scratchdir,hostname,sysname] = setupdirs()
    ctrfPriceDir = scratchdir + '/../'
    ctrfPriceData= '/ctrfPrice.data' #4 SCENARIOS
    
    with open(ctrfPriceDir+ctrfPriceData, 'rb') as filehandle:
        [ctrfPriceData,numsim,gridDeltaPrice,num_nets, size_nets, attr, data_a, data_g]=pickle.load(filehandle)
    #ctrfPriceSim
    #   [scid]
    #       [simdata,simdataFixedNet,simdataPEoff,simdataNoPE]
    #           [sim_a, sim_g, jprice, jscid]

    texdir  = currentdir + '/../../TeX/'
    texfile  = 'table_ctrfPrice.tex'
    texfile2 = 'table_ctrfPrice_tests.tex'


    ctrfPrice0 =ctrfPriceData[(ctrfPriceData.sim==0)].copy() #sim=0 is data, for all scid, for all ctrf scenarios
    ctrfPrice  =ctrfPriceData[~(ctrfPriceData.sim==0)].copy()
    ctrfPrice.sim = ctrfPrice.sim - 1
        
    #weighted & unweighted mean
    meanCtrf  = ctrfPrice.groupby(['dprice']).mean().reset_index()
    ctrfPolicyU = meanCtrf - meanCtrf.iloc[0].values.squeeze()
    ctrfPrice['mean_weights']= float(num_nets)*ctrfPrice.netsize/float(sum(size_nets))
    WctrfPrice=ctrfPrice.copy()
    for j,jvar in enumerate(list(WctrfPrice.columns)[3:-1]):
        WctrfPrice[jvar]=WctrfPrice[jvar]*WctrfPrice['mean_weights']
    WmeanCtrf = WctrfPrice.groupby(['dprice']).mean().reset_index()#).copy()
    ctrfPolicy = WmeanCtrf - WmeanCtrf.iloc[0].values.squeeze()


    # #ctrfPrice=pd.concat(ctrfPriceData,ignore_index=True) #all scids in one df
    # ctrfPrice = ctrfPriceData.copy()
    # ctrfPrice.dprice[(ctrfPrice.sim==0)]=-1 #sim=0 is data, for all scid, for all ctrf scenarios 
    # meanCtrfPrice=ctrfPrice.groupby(['scid', 'dprice']).mean().reset_index()
    # #above: get unweighted mean across simulations
    # #below: weighted mean across schools
    # allnetssize=meanCtrfPrice.netsize[meanCtrfPrice.dprice==-1].sum()
    # meanCtrfPrice['weights']=meanCtrfPrice['netsize']/allnetssize
    # tmp=meanCtrfPrice.copy()
    # for j,stat in enumerate(meanCtrfPrice.columns):
    #     if j>3:
    #         tmp[stat]=tmp[stat]*tmp['weights']
    # weightedMeanCtrfPrice=tmp.groupby('dprice').sum().reset_index()
    # ctrfPolicy = weightedMeanCtrfPrice - weightedMeanCtrfPrice.iloc[1].values.squeeze()

    table_ctrfPrice=''
    for ii in range(len(gridDeltaPrice)-1):
        dp_ii=int(gridDeltaPrice[ii+1])
        texline= f'{dp_ii:4.0f}'
        for j,jscenario in enumerate(['prev-Model', 'prev-RestrictNet','prev-FixedNet','prev-noNetData']):
            deltaPrev = -100*ctrfPolicy.loc[ii+1,jscenario]
            texline = texline + f' & {deltaPrev:4.1f}'        
        table_ctrfPrice = table_ctrfPrice + texline + r' \\' + ' \n'
            
    texsignature=f'% tex created by {pyfilename}.py \n'
    texheader = r'''
    \begin{table}[!t]
    \caption{Changes in the price of tobacco}
    \label{table:ctrf-price}
    \begin{center}
    \begin{tabular}{ccccccc}
    Price increase & Model  &  Restrict net &  Exog net & No net data\\ \hline \hline
    '''
    
    texfooter = r'''
    \hline
    \end{tabular}
    \end{center}
    \fignotetitle{Note:} The first column shows proposed increases in tobacco prices in cents. 
    The average price of a pack of cigarettes is \$1.67 so that 20 cents is approximately 10\%. 
    The second through fourth columns show the predicted increase in the overall smoking (baseline 41\%) in ppt 
    from the full model, from the model when the friendship network is fixed, and 
    from the model when no social network data is available. 
    In this last scenario the local peer effect term is absent so that $\phi$ is forced to equal zero in the estimation. 
    \end{table}
    '''
    
    texcontent = texsignature + texheader + table_ctrfPrice + texfooter
    with open(texdir+texfile,'w') as f:
        f.write(texcontent)

    
    # -B- Compare the distribution of overall smoking under different price scenarios
    graphdir=texdir
    graphfile='fig_ctrfPrice_compareDistSmoking.pdf'
    models_labels      =['Endog net dP=40','Fixed net dP=40',
                         'Endog net dP=80','Fixed net dP=80',
                         'Endog net dP=120','Fixed net dP=120']
    models_labels      =['dP=40','Fixed net dP=40',
                         'dP=80','Fixed net dP=80',
                         'dP=120','Fixed net dP=120',
                         'dP=160','Fixed net dP=160']
     
    prev_range = np.linspace(-10, 30, 100)[:, np.newaxis]#adds axis to 1d to make it 2d array
    
    simCtrfPrice=(ctrfPrice.loc[:,:'prev-noNetData']).copy()
    simCtrfPrice['weights']=simCtrfPrice['netsize']/float(sum(size_nets))
    for j,stat in enumerate(simCtrfPrice.columns):
        if j>3 and j<7:
            simCtrfPrice[stat]=simCtrfPrice[stat]*simCtrfPrice['weights']
    drawsCtrfPrice=simCtrfPrice.groupby(['sim', 'dprice']).sum().reset_index()
    drawsCtrfPrice_wide=-100*drawsCtrfPrice.pivot(index='sim', columns='dprice', 
                                                  values=['prev-Model', 'prev-FixedNet', 'prev-noNetData'])


    fig, axs = plt.subplots()
    linestyles1 = ['g-', 'b-', 'y-', 'r-']
    linestyles2 = ['g:', 'b:', 'y:', 'r:']
    linewidths = [2,2,2,2,2]

    for j,jj in enumerate([3,5,7]):
        print(j,jj)
        x =drawsCtrfPrice_wide.loc[1:,('prev-Model',jj)][:, np.newaxis] - drawsCtrfPrice_wide.loc[1:,('prev-Model',0)][:, np.newaxis]#.to_numpy()
        xx=drawsCtrfPrice_wide.loc[1:,('prev-FixedNet',jj)][:, np.newaxis] - drawsCtrfPrice_wide.loc[1:,('prev-FixedNet',0)][:, np.newaxis]#.to_numpy()
        
        kde = KernelDensity(kernel='gaussian', bandwidth=1.5).fit(x)
        log_dens = kde.score_samples(prev_range)
        axs.plot(prev_range, np.exp(log_dens), linestyles1[j],linewidth=linewidths[j], label="{0}".format(models_labels[jj-3]))
        kde = KernelDensity(kernel='gaussian', bandwidth=1.5).fit(xx)
        log_dens = kde.score_samples(prev_range)
        #axs.plot(prev_range, np.exp(log_dens), linestyles[jj-2],linewidth=linewidths[j], label="{0}".format(models_labels[jj-2]))
        axs.plot(prev_range, np.exp(log_dens), linestyles2[j],linewidth=linewidths[j])

    
    axs.legend(loc='upper right')
    #ax.plot(X[:, 0], -0.005 - 0.01 * np.random.random(X.shape[0]), '+k')
    axs.set_xlim(np.min(prev_range), np.max(prev_range))
    #axs.tick_params(axis='y', bottom='off', top='off', labelbottom='off', right='off', left='off', labelleft='off')
    #axs.axes.get_yaxis().set_visible(False)
    xmarks=[i for i in np.linspace(np.min(prev_range),np.max(prev_range),5)]
    plt.xticks(xmarks,rotation=45)
    axs.spines['right'].set_visible(False)
    axs.spines['top'].set_visible(False)
    axs.spines['left'].set_visible(False)
    axs.set_yticklabels([])
    axs.set_yticks([])
    
    plt.savefig(graphdir+graphfile, dpi=300)
    
    
    # -C- Compare policy effects for different levels of price change
    models_labels =['dP=20','dP=40','dP=60','dP=80','dP=100','dP=120']
    models_labels =['20','40','60','80','100','120']
    nmodels=len(models_labels)
    p1=np.zeros([nmodels,nmodels])
    p2=np.zeros([nmodels,nmodels])
    for j in range(nmodels):
        for jj in range(nmodels):
            rvs1=(drawsCtrfPrice_wide.iloc[1:,j+2] - drawsCtrfPrice_wide.iloc[1:,1]).to_numpy()
            rvs2=(drawsCtrfPrice_wide.iloc[1:,jj+2]- drawsCtrfPrice_wide.iloc[1:,1]).to_numpy()
            
        
            #rvs1=posteriorsPrice.iloc[:,j].to_numpy()
            #rvs2=posteriorsPrice.iloc[:,jj].to_numpy()
            [t, p1[j,jj]]=stats.ttest_ind(rvs1,rvs2, equal_var = False)
    
            #rvs1=posteriorsPrice.iloc[:,j].to_numpy()
            #rvs2=posteriorsPrice.iloc[:,jj].to_numpy()
            [t, p2[j,jj]]=stats.ks_2samp(rvs1,rvs2)


    texsignature=f'% tex created by {pyfilename}.py \n'
    texheader = r'''
    \begin{table}[!h]
    \caption{Pairwise tests of the policy effects for different levels of price change}
    \label{table:ctrf-posteriorPrice-tests}
    \begin{center}
    \begin{tabular}{lccccccc}
    Policy & \multirow{2}{*}{20} & \multirow{2}{*}{40}&\multirow{2}{*}{60}&\multirow{2}{*}{80}&\multirow{2}{*}{100}&\multirow{2}{*}{120} \\
    level (dP)&  \\ \hline \hline
    '''
    #grid_policy=range(0,60,10)
    table_ctrf=''
    for r,model in enumerate(models_labels):
        texline= f'{model:12}'
        for c in range(r+1):
            texline = texline + f' & {p1[r,c]:4.2f} ({p2[r,c]:4.2f})'        
        table_ctrf = table_ctrf + texline + r' \\' + ' \n'
        
    texfooter = r'''
    \hline
    \end{tabular}
    \end{center}
    \fignotetitle{Note:} \fignotetext{
    Each cell compares the policy effects for a pair of price changes.
    The two p-values are from testing a hypothesis of equal means and from testing a hypothesis of equal distributions
    (two-sample Kolmogorov-Smirnov test).}
    \end{table}
    '''
    
    texcontent = texsignature + texheader + table_ctrf + texfooter
    with open(texdir+texfile2,'w') as f:
         f.write(texcontent)




if __name__ == '__main__':
    main()
